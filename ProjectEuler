
PROJECT EULER
Problem 1:
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.

function multiplesOf3and5(number) {
	// establish a global total and set initial value to 0
	let total = 0
	// loop through all values from 0 to given number	
  for(let i = 0; i <= number; i++) {
		// Get remainder of i and 3
		let remainderFor3 = i % 3;
		// Get remainder of i and 5
		let remainderFor5 = i % 5;		// check if remainder for 3 or 5
		if(remainderFor3 == 0 || remainderFor5 == 0) {
			// If true, that means i is a multiple of 3
			// add it to the total
			total = total + i
		}
	}
	// return our total number
	return total
}






Problem 41
We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.

What is the largest n-digit pandigital prime that exists?

var factors = {};
factors.getFactors = function (number){
    var factors = [];
    
    var possibleFactor = 1;
    var sqrt = Math.sqrt(number);
    while(possibleFactor <= sqrt){
        if(number % possibleFactor == 0){
            factors[factors.length] = possibleFactor;
            
            var otherPossibleFactor = number / possibleFactor;
            if(otherPossibleFactor > possibleFactor){
                factors[factors.length] = otherPossibleFactor;
            } 
        }
        possibleFactor++;
    }
    
    return factors;
};//End of factors.getFactors function
var prime = {};
prime.isPrime = function(num){
    num = (num > 0) ? num : num * -1;
    return factors.getFactors(num).length == 2;
};//Checks if the provided number is prime

var isPandigital = function(number){
    var numString = number + '';
    var numLength = numString.length;
    for(var i = 1; i <= numLength; i++){
        if(numString.indexOf(i+'')==-1){
            return false;
        }
    }

    return true;
};

console.log(isPandigital(2143));

//because 1+2+3+4+5+6+7+8 is a multiple of 3 and 1+2+3+4+5+6+7+8+9 is a multiple of 3, 8 and 9 digit pandigital primes are not possible!

var pandigitalNumbers = 0;
for(var i = 7654321; i > 0; i--){
    if(isPandigital(i)){
        if(prime.isPrime(i)){
            console.log(i);
            break;
        }
    }
}
    






Problem 21:
Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.
For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
Evaluate the sum of all the amicable numbers under 10000.

var total = 10000;
	var halfTotal = total / 2;
	var amicableNumbers = [];
	var sum = 0;
	

	for (var i = 0; i < halfTotal; i++){
	  if (total % i === 0){
	    amicableNumbers.push(i);
	    sum += i;
	  }
	}
	

	console.log("Sum of all amicable numbers under " + total + " is " + sum);
	
	console.log(amicableNumbers);





Problem 31:
In the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins in general circulation:1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).                                                          It is possible to make £2 in the following way:
1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
How many different ways can £2 be made using any number of coins?
//Set up the coin values
var coinValues = [1, 2, 5, 10, 20, 50, 100, 200];

//Set up the object to memoize the operation results
var comboCounts = [];
for(var i = 0; i < coinValues.length; i++){
    comboCounts[i] = [];
}

var findDifferentCoinCombos = function(amount, maxIndex) {
    var combos = 0;

    //Consider the max index if no index was passed in
    maxIndex = (maxIndex || maxIndex == 0) ? maxIndex : coinValues.length - 1;
    
    //Handle 1 combo cases manually
    if(maxIndex == 0 || amount == 0){
        return 1;
    }
    //If we've already figured out the answer, return that
    if(comboCounts[maxIndex][amount]){
        return comboCounts[maxIndex][amount];
    }
    
    //Sum the possible combinations of lesser coins for each possible amount of highest valued coins
    var coinValue = coinValues[maxIndex];
    var coinAmount = 0;
    while(amount >= coinAmount){
        combos += findDifferentCoinCombos(amount - coinAmount, maxIndex - 1);
        coinAmount += coinValue;
    }
    
    //Memoize it
    comboCounts[maxIndex][amount] = combos;

    //Return the answer
    return combos;
};

console.log(findDifferentCoinCombos(200));

Problem 61
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.


function q(m) {
  return function (x) {
    var s = (8 * m - 16) * x + (m * m - 8 * m + 16);
    return (Math.sqrt(s) + (m - 4)) % (2 * m - 4) == 0;
  }
}

q3 = q(3);
q4 = q(4);
q5 = q(5);
q6 = q(6);
q7 = q(7);
q8 = q(8);

var f3 = 0;
var f4 = 0;
var f5 = 0;
var f6 = 0;
var f7 = 0;
var f8 = 0;

var v = [];

function r(k) {
  if (k == 6) {
    if (v[0] == v[6]) {
      ans = (v[0] + v[1] + v[2] + v[3] + v[4] + v[5]) * 101;
    }
  } else {
    var a = v[k] * 100;
    for (var i = v[0]; i < 100; i++) {
      var b = a + i;
      if (f3 == 0 && q3(b)) {
        f3 = 1; v[k + 1] = i; r(k + 1); f3 = 0;
      }
      if (f4 == 0 && q4(b)) {
        f4 = 1; v[k + 1] = i; r(k + 1); f4 = 0;
      }
      if (f5 == 0 && q5(b)) {
        f5 = 1; v[k + 1] = i; r(k + 1); f5 = 0;
      }
      if (f6 == 0 && q6(b)) {
        f6 = 1; v[k + 1] = i; r(k + 1); f6 = 0;
      }
      if (f7 == 0 && q7(b)) {
        f7 = 1; v[k + 1] = i; r(k + 1); f7 = 0;
      }
      if (f8 == 0 && q8(b)) {
        f8 = 1; v[k + 1] = i; r(k + 1); f8 = 0;
      }
    }
  }
}

ans = 0;
for (var i = 10; i < 100; i++) {
  v[0] = i;
  r(0);
}
document.write('ANS: ', ans);







	console.log(amicableNumbers);













Problem 31:
In the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins in general circulation:1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).                                                          It is possible to make £2 in the following way:
1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
How many different ways can £2 be made using any number of coins?
//Set up the coin values
var coinValues = [1, 2, 5, 10, 20, 50, 100, 200];

//Set up the object to memoize the operation results
var comboCounts = [];
for(var i = 0; i < coinValues.length; i++){
    comboCounts[i] = [];
}

var findDifferentCoinCombos = function(amount, maxIndex) {
    var combos = 0;

    //Consider the max index if no index was passed in
    maxIndex = (maxIndex || maxIndex == 0) ? maxIndex : coinValues.length - 1;
    
    //Handle 1 combo cases manually
    if(maxIndex == 0 || amount == 0){
        return 1;
    }
    //If we've already figured out the answer, return that
    if(comboCounts[maxIndex][amount]){
        return comboCounts[maxIndex][amount];
    }
    
    //Sum the possible combinations of lesser coins for each possible amount of highest valued coins
    var coinValue = coinValues[maxIndex];
    var coinAmount = 0;
    while(amount >= coinAmount){
        combos += findDifferentCoinCombos(amount - coinAmount, maxIndex - 1);
        coinAmount += coinValue;
    }
    
    //Memoize it
    comboCounts[maxIndex][amount] = combos;

    //Return the answer
    return combos;
};

console.log(findDifferentCoinCombos(200));




